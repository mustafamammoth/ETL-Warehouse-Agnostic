# google_sheets.yml - Google Sheets configuration (cleaned and minimal)

dag:
  dag_id: "google_sheets_extract"
  description: "Extract from Google Sheets with individual sheet scheduling"
  owner: "data-team"
  # DAG runs every hour to check if any sheets need extraction
  schedule_interval: "0 * * * *"
  # Maximum number of concurrent DAG runs (recommended: 1 for data consistency)
  max_active_runs: 1
  start_date: "2025-06-30"
  # Number of retry attempts on task failure (0-5 recommended)
  retries: 1
  # Minutes to wait between retries
  retry_delay_minutes: 10
  email_on_failure: true
  email_on_retry: false
  email_on_success: true
  # Tags for DAG categorization and filtering in Airflow UI
  tags:
    - "google_sheets"
    - "extract"
    - "spreadsheet"
    - "scheduled"
    - "production"

notifications:
  email:
    # Email addresses to notify on task/DAG failures
    failure_recipients:
      - "mustafa.zaki@mammoth.org"
    # Email addresses to notify on successful completion
    success_recipients:
      - "mustafa.zaki@mammoth.org"
    # Email addresses to notify on task retries
    retry_recipients:
      - "mustafa.zaki@mammoth.org"

google_sheets:
  # Spreadsheet ID from environment variable for security and flexibility
  # Set via: GOOGLE_SPREADSHEET_ID=1A2B3C4D5E6F7G8H9I0J...
  spreadsheet_id: "${GOOGLE_SPREADSHEET_ID}"
  
  # Alternative: You could also use the full URL and extract ID programmatically
  # spreadsheet_url: "${GOOGLE_SPREADSHEET_URL}"  # Full Google Sheets URL
  
  # Google credentials path set via: GOOGLE_APPLICATION_CREDENTIALS
  # This should point to your service account JSON file
  
  # Connection settings
  connection:
    # Request timeout in seconds (30-120 recommended)
    timeout_seconds: 60
    # Number of retry attempts for failed API calls (1-5 recommended)
    max_retries: 3
    # Exponential backoff multiplier for retries (1.0-3.0 typical)
    backoff_factor: 2.0

extraction:
  # Extraction mode affects record limits (testing, production)
  mode: "production"
  # Force extract all sheets regardless of schedule (true, false) - useful for testing
  force_extract_all: true
  
  testing:
    # Maximum records per sheet in testing mode (10-1000)
    max_records_per_sheet: 100
  production:
    # Maximum records per sheet in production (null for unlimited)
    max_records_per_sheet: null
  
  # Sheet configurations - YOUR ACTUAL TABS
  sheets:
    # RPM Sheet - Full Refresh, twice daily (morning + after cutoff)
    "RPM_SHEETS":
      # Enable/disable this sheet extraction (true, false)
      enabled: true
      # Complete data replacement vs append mode (true=full refresh, false=incremental)
      full_refresh: true
      # Cell range to extract (e.g., "A:Z", "A1:Z1000", "Sheet1!A:C")
      range: "RPM_SHEETS!A:Z"
      # Number of header rows to skip (0-10 typical)
      skip_rows: 0
      # Execution priority within same schedule (high, medium, low)
      priority: "high"
      schedule:
        # Cron expression for when to extract this sheet
        cron: "0 6,18 * * *"          # 6 AM and 6 PM daily
      description: "RPM Sheets - twice daily full refresh"
      
    # RPM Details - Full Refresh, twice daily (morning + after cutoff)  
    "RPM_DETAILS":
      enabled: true
      full_refresh: true
      range: "RPM_DETAILS!A:Z"
      skip_rows: 0
      priority: "high"
      schedule:
        cron: "0 6,18 * * *"          # 6 AM and 6 PM daily
      description: "RPM Details - twice daily full refresh"
      
    # DCC - Append (track when licenses initially added)
    "DCC":
      enabled: true
      # Note: You mentioned "delete entire table and re-add" - that's actually full_refresh: true
      # If you want to track initial add dates, you might need full_refresh: true with date tracking
      full_refresh: true             # Append mode
      range: "DCC!A:Z"
      skip_rows: 0
      priority: "high"
      schedule:
        cron: "0 8 * * *"             # Daily at 8 AM
      description: "DCC licenses - append to track initial add dates"
      
    # Metrc - Full Refresh (license removal tracking critical)
    "METRC":
      enabled: true
      # MUST be full refresh to detect removals
      full_refresh: true
      range: "Metrc!A:Z"
      skip_rows: 0
      priority: "high"
      schedule:
        cron: "0 9 * * *"             # Daily at 9 AM
      description: "Metrc licenses - full refresh to detect removals"
      
    # Goals - Full Refresh, monthly between 14th-18th
    "GOALS_MAMMOTH":
      enabled: true
      full_refresh: true
      range: "GOALS_MAMMOTH!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        # Daily at 10 AM between 14th-18th of month
        cron: "0 10 14-18 * *"
      description: "GOALS_MAMMOTH - monthly update between 14th-18th"
      
    # Goals - Full Refresh, monthly between 14th-18th
    "GOALS_SEQUOIA":
      enabled: true
      full_refresh: true
      range: "GOALS_SEQUOIA!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        # Daily at 10 AM between 14th-18th of month
        cron: "0 10 14-18 * *"
      description: "GOALS_SEQUOIA - monthly update between 14th-18th"

    # Non-CA Products - Full Refresh, updated as needed
    "ALT_STATE_PRODUCTS":
      enabled: true
      full_refresh: true
      range: "ALT_STATE_PRODUCTS!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        cron: "0 11 * * *"            # Daily at 11 AM
      description: "Non-CA Products - updated as needed"
      
    # Manual Mapping - Append (new records added to bottom)
    "MANUAL_MAPPING":
      enabled: true
      # Append mode for new records
      full_refresh: true
      range: "MANUAL_MAPPING!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        cron: "0 12 * * *"            # Daily at 12 PM
      description: "Manual Mapping - append new records"
      # Note: For "cells edited since last pull" you'd need more complex logic
      
    # Budgets By Code - Full Refresh, monthly between 14th-18th
    "BUDGETS_BY_CODE":
      enabled: true
      full_refresh: true
      range: "BUDGETS_BY_CODE!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        # Daily at 1 PM between 14th-18th of month
        cron: "0 13 14-18 * *"
      description: "Budgets By Code - monthly update between 14th-18th"
      
    # Budgets By Category - Full Refresh, monthly between 14th-18th
    "BUDGETS_BY_CATEGORY":
      enabled: true
      full_refresh: true
      range: "BUDGETS_BY_CATEGORY!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        # Daily at 2 PM between 14th-18th of month
        cron: "0 14 14-18 * *"
      description: "Budgets By Category - monthly update between 14th-18th"
      
    # Budget Focus Lines - Full Refresh, updated as needed
    "BUDGET_FOCUS_LINES":
      enabled: true
      full_refresh: true
      range: "BUDGET_FOCUS_LINES!A:Z"
      skip_rows: 0
      priority: "medium"
      schedule:
        cron: "0 15 * * *"            # Daily at 3 PM
      description: "Budget Focus Lines - updated as needed"

warehouse:
  # Active warehouse type for data loading (clickhouse, snowflake, bigquery)
  active_warehouse: "clickhouse"
  schemas:
    # Schema for raw/bronze layer data
    bronze_schema: "bronze_spreadsheet"
    # Schema for transformed/silver layer data
    silver_schema: "silver_spreadsheet"
    # Alias for compatibility
    raw_schema: "bronze_spreadsheet"
    # Alias for dbt staging models
    staging_schema: "silver_spreadsheet"
  
  clickhouse:
    # Batch size for bulk inserts (100-5000 for spreadsheets)
    chunk_size: 1000
    # Number of concurrent connections (1-10)
    connection_pool_size: 5
    # Retry attempts for failed warehouse operations (1-5)
    max_retries: 3
    # Table partitioning strategy (by_date, by_month, none)
    partition_strategy: "by_date"

# Common cron patterns for reference:
# Examples of cron expressions you can use in sheet schedules:
cron_examples:
  every_minute: "* * * * *"
  every_5_minutes: "*/5 * * * *"
  every_15_minutes: "*/15 * * * *"
  every_30_minutes: "*/30 * * * *"
  hourly: "0 * * * *"
  daily_at_6am: "0 6 * * *"
  daily_at_midnight: "0 0 * * *"
  twice_daily: "0 6,18 * * *"
  weekdays_only: "0 9 * * 1-5"
  weekends_only: "0 10 * * 0,6"
  weekly_monday: "0 8 * * 1"
  first_of_month: "0 2 1 * *"
  15th_of_month: "0 4 15 * *"
  last_day_of_month: "0 23 28-31 * *"
  quarterly: "0 9 1 1,4,7,10 *"
  yearly: "0 0 1 1 *"
  business_hours: "0 9-17 * * 1-5"
  mid_month_range: "0 8 14-18 * *"